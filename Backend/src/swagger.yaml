openapi: 3.0.3
info:
  title: TouchYatra Apis Docs
  description: >-
    # TouchYatra.app
  version: 1.3.1
  contact: {}
servers:
  - url: ${{server}}
paths: 
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - FirstName
                - LastName
                - DisplayName
                - Email
                - Password
              properties:
                FirstName:
                  type: string
                  example: John
                LastName:
                  type: string
                  example: Doe
                DisplayName:
                  type: string
                  example: johndoe123
                Email:
                  type: string
                  format: email
                  example: john@example.com
                Password:
                  type: string
                  format: password
                  example: MySecurePass123
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: User already exists or display name taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/verify-email:
    post:
      summary: Verify user's email using token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT email verification token
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/resend-verification:
    post:
      summary: Resend email verification link
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
      responses:
        "200":
          description: Email verification link resent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Email
                - Password
              properties:
                Email:
                  type: string
                  format: email
                  example: john@example.com
                Password:
                  type: string
                  format: password
                  example: MySecurePass123
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Invalid email, password, or email not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /getLoggerDetails:
    get:
      tags: 
        - Authentication
      summary: Get logged-in user details
      description: >
        Fetches the authenticated user's details using a valid **access token**.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    example:
                      _id: "60f8c2c1d4b2f1e2f4c12a34"
                      name: "John Doe"
                      email: "john@example.com"
                  message:
                    type: string
                    example: User details fetched successfully
        '401':
          description: Unauthorized — Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    get:
      tags: 
        - Authentication
      summary: Logout user
      description: >
        Logs out the current user by clearing cookies and removing the stored refresh token.
        Requires a valid **access token**.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    example: {}
                  message:
                    type: string
                    example: User logged Out
        '401':
          description: Unauthorized — Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refereshAccessToken:
    get:
      tags: 
        - Authentication
      summary: Refresh access token
      description: >
        Generates a new **access token** and **refresh token** if the provided refresh token is valid.
        <br><br>
        You can send the refresh token through one of these:
        - **Cookie:** `refreshToken`
        - **Header:** `X-Authorization-Refresh`
        - **Body:** `{ "refreshToken": "<token>" }`
      parameters:
        - name: X-Authorization-Refresh
          in: header
          required: false
          schema:
            type: string
          description: Refresh token sent via custom header
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token sent in the request body
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                  message:
                    type: string
                    example: Access token refreshed
        '401':
          description: Unauthorized — Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Include your access token as:
        ```
        Authorization: Bearer <access_token>
        ```

  schemas:
    ApiResponse:
      type: object
      properties:
        IsSuccess:
          type: boolean
          example: true
        Message:
          type: string
          example: User registered successfully
        Data:
          nullable: true
          example: null
        Errors:
          type: array
          items:
            type: string
            example: null

    ApiError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid email or password
        statusCode:
          type: integer
          example: 400
        errors:
          type: array
          items:
            type: string
          example: []

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            Data:
              type: object
              properties:
                accessToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...